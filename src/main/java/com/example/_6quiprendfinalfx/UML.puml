@startuml
'https://plantuml.com/sequence-diagram

class Card {
  - value: int
  - penalty: int
  + Card(value: int, penalty: int)
  + compareTo(otherCard: Card): int
}
class Deck {
  - MIN_CARD_VALUE: int
  - MAX_CARD_VALUE: int
  - DEFAULT_CARDS_COUNT_PER_PLAYER: int
  - cards: List<Card>
  + createCards(): List<Card>
  + penalities(number: int): int
  + distribCards(nPlayer: int, random: Random, cards: List<Card>): List<Hand>
  + distribCards(Players: int, rand: Random, cards: List<Card>, CardQuantity: int): List<Hand>
}
class Hand {
    -cards: TreeSet<Card>

    +Hand(listOfCards: Collection<Card>)
    +add(indexCard: Card): void
}
class Rows {
    -cards: List<Card>

    +Rows(firstCard: Card)
    +add(card: Card): void
    +rebootRow(card: Card): void
}
class Game {
    -isFinished: boolean
    -players: List<Player>
    -allCards: List<Card>
    -tableRows: List<Rows>
    -selectedRow: Rows
    -cardsToPlay: List<Card>
    -playerToCardPlayed: Map<Player, Card>
    -currentPlayer: Player
    -currentIndexPlayer: int

    +Game()
    +addPlayer(player: Player): void
    +start(nbPlayers: int, nbCards: int): void
}
class IA {
    // TODO: IA plays
}
class Player {
    -name: String
    -hand: List<Card>
    -handImages: List<ImageView>
    -penalities: int
    -Ai: boolean

    +Player(name: String, isAi: boolean)
    +addCardToHand(card: Card): void
    +addCardImageView(card: ImageView): void
}
class CardImages {
    -backsideImage: Image
    -cardImages: Image[]

    +getFrontCardImage(card: Card): Image
    -createBackCardImage(): Image
    -createCardImages(): Image[]
}
class CardRowView {
    -cardsImages: List<ImageView>

    +CardRowView()
    +add(cardView: ImageView): void
    +updateImages(index: int, imagelink: String): void
}
class CardView {
    -component: Pane
    -stackView: StackPane
    -frontImageView: ImageView
    -card: Card
    -frontSide: boolean

    +CardView(card: Card, width: int, height: int)
}
class GameController {
    -cardP1_0: ImageView
    . . .
    -cardR4_5: ImageView

    -isFinished: boolean
    -players: List<Player>
    -allCards: List<Card>
    -CardRows: List<Rows>
    -CardRowsView: List<CardRowView>

    +GameController()
    +initialize(location: URL, resources: ResourceBundle)
    +addPlayer(player: Player)
    +start()
    -getCardImagePath(card: Card): String
}
class HelloController {
    -welcomeText: Label

    +onHelloButtonClick()
}
class PlayerView {
    -component: HBox
    -handCardsViews: List<CardView>

    +addCardToHand(card: Card)
}
class HelloApplication {
    +start(stage: Stage)
    +main(args: String[])
}

Card -- Deck
Player -- Deck
Player -- Card
PlayerView -- CardView
PlayerView -- Card
Rows -- Card
Hand -- Card
Hand -- Player
Game -- Player
Game -- Rows
Game -- Card
GameController -- Card
GameController -- CardView
GameController -- Player
GameController -- CardRowView
CardImages -- Card
CardView -- Card
HelloApplication -- GameController

@enduml